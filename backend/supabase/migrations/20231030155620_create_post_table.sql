CREATE TABLE public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    description TEXT NULL,
    image TEXT NULL,
    user_id BIGINT NOT NULL,
    CONSTRAINT posts_pkey PRIMARY KEY (id),
    CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_profiles (id) ON DELETE CASCADE
) TABLESPACE pg_default;

  -- DROP POLICY "Access All" ON public.posts;
  create policy "Access All" on public.posts for all using ( true );

  insert into storage.buckets (id, name, public) values ('posts', 'posts', true);

  CREATE POLICY "allow posts" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'posts');

  -- create  policy "Access All" on storage.buckets for all using ( true );


  --functions
  CREATE OR REPLACE FUNCTION get_posts()
RETURNS TABLE (
   id bigint,
   description text,
   image text,
   user_id bigint,
   user_profiles jsonb,
   created_at timestamp with time zone,
   likes jsonb
)
LANGUAGE plpgsql AS $$
BEGIN
   RETURN QUERY
   SELECT
      p.id AS id,
      p.description,
      p.image,
      p.user_id,
      jsonb_build_object(
         'user_id', u.id,
         'user_name', u.user_name,
         'first_name', u.first_name,
         'last_name', u.last_name,
         'profile', u.profile,
         'email', u.email
      ) AS user_profiles,
      p.created_at,
      (
         SELECT jsonb_agg(jsonb_build_object(
            'created_at', l.created_at,
            'id', l.id,
            'post_id', l.post_id,
            'user_id', l.user_id
         )) FROM post_likes l
         WHERE l.post_id = p.id
      ) AS likes
   FROM posts p
   JOIN user_profiles u ON p.user_id = u.id
   ORDER BY p.created_at DESC;
END;
$$;